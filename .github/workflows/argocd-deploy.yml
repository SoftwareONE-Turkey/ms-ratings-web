name: Argo CD Deploy


on:
  push:
    branches: [ masterr ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ masterr ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: quay.io
  USER_NAME: swoturkey
  # github.repository as <account>/<repo>
  IMAGE_NAME: swoturkey/ratings-web
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


jobs:
  containerization:
    #if: github.event_name != 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USER_NAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: false #${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Download twistcli binary and Image Scan
        run: |
          wget http://20.50.198.185/twistcli;
          chmod a+x twistcli;
          ./twistcli images scan -u ${{ secrets.TWISTLOCK_USERNAME }} -p ${{ secrets.TWISTLOCK_PASSWORD }} --address ${{ secrets.TWISTLOCK_URL }} ${{ steps.meta.outputs.tags }} --details --publish
      - name: Docker Push
        run: docker push ${{ steps.meta.outputs.tags }}
      - uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()
  deployWithArgoCD:
    #if: github.event_name != 'push'
    runs-on: ubuntu-latest
    needs: containerization
    permissions:
      contents: read
      packages: write
    steps:
      - name: Install Argo CD cli
        run: |
          curl -sSL -o ./argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x ./argocd
      - name: Argo CD Login
        run: ./argocd login ${{ secrets.ARGOCD_URL }} --username admin --password ${{ secrets.ARGOCD_PASSWORD }}
      - name: Argo CD App List
        run: ./argocd app list
      - name: Argo CD App Set
        run: ./argocd app set ratings-web -p image.repository=quay.io/swoturkey/ratings-web -p image.tag=master
      - name: Argo CD Sync
        run: ./argocd app sync ratings-web
      - name: Restart Pods
        run: ./argocd app actions run ratings-web restart --kind Deployment
      - uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()
