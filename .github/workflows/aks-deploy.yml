name: Docker

on:
  push:
    branches: [ masterr ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ masterr ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: quay.io
  USER_NAME: swoturkey
  # github.repository as <account>/<repo>
  IMAGE_NAME: swoturkey/ratings-web
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


jobs:
  build:
    #if: github.event_name != 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
  checkov:
    runs-on: ubuntu-latest
    needs: build
    name: checkov-action
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2.2.2
      - name: Install Checkov
        run: pip install -U checkov
      - name: Scan Helm Charts with Checkov
        run: bash -c 'find -iname chart.yaml' | xargs -n1 -I% bash -c " dirname %" | xargs -n1 -I% bash -c "helm template % > %.yaml && checkov -f %.yaml --framework kubernetes || true" --
      - uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()
  sonarScan:
    #if: github.event_name != 'push'
    runs-on: ubuntu-latest
    needs: checkov
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=SoftwareONE-Turkey_mslearn-aks-workshop-ratings-web
            -Dsonar.organization=softwareone-turkey
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()
  snyk:
    #if: github.event_name != 'push'
    runs-on: ubuntu-latest
    needs: sonarScan
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --severity-threshold=high
      - uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()     
  containerization:
    #if: github.event_name != 'push'
    runs-on: ubuntu-latest
    needs: snyk
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USER_NAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: false #${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Download twistcli binary and Image Scan
        run: |
          #curl --progress-bar -L -k --header "authorization: Bearer ${{ secrets.TWISTLOCK_TOKEN }}" {{ secrets.TWISTLOCK_CLI_URL }} > twistcli;
          wget http://20.50.198.185/twistcli;
          chmod a+x twistcli;
          ./twistcli images scan -u {{ secrets.TWISTLOCK_USERNAME }} -p {{ secrets.TWISTLOCK_PASSWORD }} --address {{ secrets.TWISTLOCK_URL }} ${{ steps.meta.outputs.tags }} --details --publish
      - name: Docker Push
        run: docker push ${{ steps.meta.outputs.tags }}
      - uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()
  deployToTest:
    #if: github.event_name != 'push'
    runs-on: ubuntu-latest
    needs: containerization
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set context for Kubernetes 
        uses: Azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Run Helm Command
        run: 'helm upgrade -i -f charts/values.yaml ratings-web-test --values charts/values-test.yaml charts/ -n ratings-app-test'
      - uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()
  owaspZap:
    #if: github.event_name != 'push'
    runs-on: ubuntu-latest
    needs: deployToTest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          target: 'https://ratings-web-test.51.138.120.31.nip.io/'
      - uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()
  deployToProd:
    #if: github.event_name != 'push'
    runs-on: ubuntu-latest
    needs: owaspZap
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set context for Kubernetes 
        uses: Azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Run Helm Command
        run: 'helm upgrade -i -f charts/values.yaml ratings-web-prod --values charts/values-prod.yaml charts/ -n ratings-app-prod'
      - uses: act10ns/slack@v1
        with: 
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()
